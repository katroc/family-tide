// Stage 4 Test Component - Service Abstraction Testing
import React, { useState, useEffect } from 'react';
import { serviceManager } from '../serviceAbstraction';

interface ServiceInfo {
  type: 'sqlite' | 'supabase';
  version: string;
  status: 'active' | 'fallback';
}

interface TestResult {
  success: boolean;
  responseTime?: number;
  error?: string;
  data?: any;
}

export const Stage4Test: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [currentService, setCurrentService] = useState<ServiceInfo | null>(null);
  const [initResult, setInitResult] = useState<TestResult | null>(null);
  const [switchResult, setSwitchResult] = useState<TestResult | null>(null);
  const [familyDetailsResult, setFamilyDetailsResult] = useState<TestResult | null>(null);
  const [serviceConfig, setServiceConfig] = useState({
    useSupabase: false,
    allowFallback: true,
    debugMode: true
  });

  // Initialize on component mount
  useEffect(() => {
    initializeServices();
  }, []);

  const initializeServices = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      console.log('üöÄ Initializing Service Manager...');
      serviceManager.updateConfig(serviceConfig);
      
      const activeService = await serviceManager.initialize();
      const serviceInfo = await activeService.getServiceInfo();
      
      const responseTime = Date.now() - startTime;
      
      setCurrentService(serviceInfo);
      setInitResult({
        success: true,
        responseTime,
        data: serviceInfo
      });
      
      console.log('‚úÖ Service Manager initialized:', serviceInfo);
      
    } catch (error: any) {
      const responseTime = Date.now() - startTime;
      setInitResult({
        success: false,
        responseTime,
        error: error.message
      });
      console.error('‚ùå Service initialization failed:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const switchToSupabase = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      console.log('üîÑ Switching to Supabase...');
      const success = await serviceManager.switchToSupabase();
      const responseTime = Date.now() - startTime;
      
      if (success) {
        const activeService = serviceManager.getActiveService();
        const serviceInfo = await activeService.getServiceInfo();
        setCurrentService(serviceInfo);
        
        setSwitchResult({
          success: true,
          responseTime,
          data: 'Successfully switched to Supabase'
        });
      } else {
        setSwitchResult({
          success: false,
          responseTime,
          error: 'Failed to switch to Supabase'
        });
      }
      
    } catch (error: any) {
      setSwitchResult({
        success: false,
        responseTime: Date.now() - startTime,
        error: error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  const switchToSQLite = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      console.log('üîÑ Switching to SQLite...');
      const success = await serviceManager.switchToSQLite();
      const responseTime = Date.now() - startTime;
      
      if (success) {
        const activeService = serviceManager.getActiveService();
        const serviceInfo = await activeService.getServiceInfo();
        setCurrentService(serviceInfo);
        
        setSwitchResult({
          success: true,
          responseTime,
          data: 'Successfully switched to SQLite'
        });
      } else {
        setSwitchResult({
          success: false,
          responseTime,
          error: 'Failed to switch to SQLite'
        });
      }
      
    } catch (error: any) {
      setSwitchResult({
        success: false,
        responseTime: Date.now() - startTime,
        error: error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  const testFamilyDetails = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      console.log('üè† Testing family details with current service...');
      const activeService = serviceManager.getActiveService();
      const familyDetails = await activeService.getFamilyDetails();
      const responseTime = Date.now() - startTime;
      
      setFamilyDetailsResult({
        success: true,
        responseTime,
        data: familyDetails
      });
      
    } catch (error: any) {
      setFamilyDetailsResult({
        success: false,
        responseTime: Date.now() - startTime,
        error: error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold mb-6 text-gray-800">
        üîß Stage 4: Service Abstraction Testing
      </h1>
      
      <div className="space-y-4">
        {/* Current Service Status */}
        <div className="border rounded-lg p-4 bg-blue-50">
          <h2 className="text-lg font-semibold mb-2">Current Service Status</h2>
          {currentService ? (
            <div className="space-y-1">
              <div className="font-medium">
                üéØ Active Service: <span className="uppercase">{currentService.type}</span>
              </div>
              <div className="text-sm text-gray-600">Version: {currentService.version}</div>
              <div className="text-sm text-gray-600">Status: {currentService.status}</div>
            </div>
          ) : (
            <div className="text-gray-500">Not initialized</div>
          )}
        </div>

        {/* Service Initialization */}
        <div className="border rounded-lg p-4">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-semibold">Service Initialization</h2>
            <button
              onClick={initializeServices}
              disabled={isLoading}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
            >
              {isLoading ? 'Initializing...' : 'Reinitialize'}
            </button>
          </div>
          
          {initResult && (
            <div className={`p-3 rounded ${initResult.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              <div className="font-medium">
                {initResult.success ? '‚úÖ Initialization Success' : '‚ùå Initialization Failed'}
              </div>
              {initResult.responseTime && (
                <div className="text-sm">Response time: {initResult.responseTime}ms</div>
              )}
              {initResult.error && (
                <div className="text-sm mt-1">Error: {initResult.error}</div>
              )}
            </div>
          )}
        </div>

        {/* Service Switching */}
        <div className="border rounded-lg p-4">
          <h2 className="text-lg font-semibold mb-3">Service Switching</h2>
          
          <div className="flex space-x-3 mb-3">
            <button
              onClick={switchToSupabase}
              disabled={isLoading || currentService?.type === 'supabase'}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
            >
              Switch to Supabase
            </button>
            
            <button
              onClick={switchToSQLite}
              disabled={isLoading || currentService?.type === 'sqlite'}
              className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 disabled:opacity-50"
            >
              Switch to SQLite
            </button>
          </div>
          
          {switchResult && (
            <div className={`p-3 rounded ${switchResult.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              <div className="font-medium">
                {switchResult.success ? '‚úÖ Switch Success' : '‚ùå Switch Failed'}
              </div>
              {switchResult.responseTime && (
                <div className="text-sm">Response time: {switchResult.responseTime}ms</div>
              )}
              {switchResult.error && (
                <div className="text-sm mt-1">Error: {switchResult.error}</div>
              )}
              {switchResult.data && (
                <div className="text-sm mt-1">{switchResult.data}</div>
              )}
            </div>
          )}
        </div>

        {/* Data Operations Test */}
        <div className="border rounded-lg p-4">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-lg font-semibold">Data Operations Test</h2>
            <button
              onClick={testFamilyDetails}
              disabled={isLoading}
              className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50"
            >
              {isLoading ? 'Testing...' : 'Test Family Details'}
            </button>
          </div>
          
          <div className="text-sm text-gray-600 mb-2">
            Tests data operations with the currently active service.
          </div>
          
          {familyDetailsResult && (
            <div className={`p-3 rounded ${familyDetailsResult.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              <div className="font-medium">
                {familyDetailsResult.success ? '‚úÖ Data Operation Success' : '‚ùå Data Operation Failed'}
              </div>
              {familyDetailsResult.responseTime && (
                <div className="text-sm">Response time: {familyDetailsResult.responseTime}ms</div>
              )}
              {familyDetailsResult.error && (
                <div className="text-sm mt-1">Error: {familyDetailsResult.error}</div>
              )}
              {familyDetailsResult.data && (
                <div className="text-xs mt-2 font-mono bg-gray-100 p-2 rounded max-h-32 overflow-y-auto">
                  {JSON.stringify(familyDetailsResult.data, null, 2)}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="font-semibold text-blue-800 mb-2">Stage 4 Test Instructions:</h3>
          <ol className="list-decimal list-inside text-sm text-blue-700 space-y-1">
            <li>Service starts with SQLite (current production service)</li>
            <li>Click "Switch to Supabase" to test service switching</li>
            <li>Test data operations with both services</li>
            <li>Verify service switching works seamlessly</li>
            <li>Check that family details load from both services</li>
            <li>Compare response times between services</li>
          </ol>
        </div>
      </div>
    </div>
  );
};
