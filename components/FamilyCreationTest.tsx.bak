import React, { useState } from 'react';
import { supabaseService } from '../supabaseService';

interface TestResult {
  success: boolean;
  data?: any;
  error?: string;
  responseTime?: number;
}

export const FamilyCreationTest: React.FC = () => {
  const [authResult, setAuthResult] = useState<TestResult | null>(null);
  const [familyResult, setFamilyResult] = useState<TestResult | null>(null);
  const [familiesResult, setFamiliesResult] = useState<TestResult | null>(null);
  const [joinResult, setJoinResult] = useState<TestResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const [credentials, setCredentials] = useState({
    email: 'testuser@familyplanner.test',
    password: 'testpassword123'
  });
  
  const [familyData, setFamilyData] = useState({
    name: 'Test Family',
    address: '123 Test Street'
  });
  
  const [inviteCode, setInviteCode] = useState('');

  const testSignUp = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      const result = await supabaseService.signUp(credentials.email, credentials.password);
      const responseTime = Date.now() - startTime;
      
      setAuthResult({
        success: result.success,
        data: result.success ? 'User created successfully' : null,
        error: result.error,
        responseTime
      });
    } catch (error: any) {
      setAuthResult({
        success: false,
        error: error.message,
        responseTime: Date.now() - startTime
      });
    } finally {
      setIsLoading(false);
    }
  };

  const testSignIn = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      const result = await supabaseService.signIn(credentials.email, credentials.password);
      const responseTime = Date.now() - startTime;
      
      setAuthResult({
        success: result.success,
        data: result.success ? 'User signed in successfully' : null,
        error: result.error,
        responseTime
      });
    } catch (error: any) {
      setAuthResult({
        success: false,
        error: error.message,
        responseTime: Date.now() - startTime
      });
    } finally {
      setIsLoading(false);
    }
  };

  const testCreateFamily = async () => {
    setIsLoading(true);
    const startTime = Date.now();
    
    try {
      const result = await supabaseService.createFamily(familyData.name, familyData.address);
      const responseTime = Date.now() - startTime;
      
      setFamilyResult({
        success: result.success,
        data: result.family,
        error: result.error,
        responseTime
      });
      
      // If successful, update invite code for testing
      if (result.success && result.family?.invite_code) {
        setInviteCode(result.family.invite_code);
      }
    } catch (error: any) {
      setFamilyResult({
        success: false,
        error: error.message,
        responseTime: Date.now() - startTime
      });
    } finally {
      setIsLoading(false);
    }
  };
